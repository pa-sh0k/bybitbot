from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging
import aiohttp
from datetime import datetime
import os
import sys

# Add the directory containing cryptocloud_client.py to Python path
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, current_dir)

from config import settings
from keyboards import (
    get_main_menu, get_balance_menu, get_usdt_deposit_amounts_keyboard,
    get_cancel_keyboard, get_back_keyboard, get_buy_signals_menu,
    get_packages_keyboard, get_package_confirm_keyboard, get_back_to_balance_keyboard
)
from cryptocloud_client import CryptoCloudClient

router = Router()
logger = logging.getLogger(__name__)

# Initialize CryptoCloud client
cryptocloud_client = None
if hasattr(settings, 'CRYPTOCLOUD_API_KEY') and hasattr(settings, 'CRYPTOCLOUD_SHOP_ID'):
    cryptocloud_client = CryptoCloudClient(
        api_key=settings.CRYPTOCLOUD_API_KEY,
        shop_id=settings.CRYPTOCLOUD_SHOP_ID,
        webhook_url=settings.CRYPTOCLOUD_WEBHOOK_URL if hasattr(settings, 'CRYPTOCLOUD_WEBHOOK_URL') else None
    )


# States
class DepositStates(StatesGroup):
    waiting_for_usdt_amount = State()
    waiting_for_payment = State()


# Helper function to get user from API
async def get_user(telegram_id: int):
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{settings.API_URL}/api/users/{telegram_id}") as response:
                if response.status == 404:
                    return None
                return await response.json()
    except Exception as e:
        logger.error(f"Error getting user: {e}")
        return None


# Helper function to add USDT balance to user
async def add_usdt_balance(telegram_id: int, amount: float):
    try:
        async with aiohttp.ClientSession() as session:
            params = {"usdt_amount": amount}
            async with session.post(f"{settings.API_URL}/api/users/{telegram_id}/add_usdt_balance",
                                    json=params) as response:
                return await response.json()
    except Exception as e:
        logger.error(f"Error adding USDT balance: {e}")
        return None


# Helper function to purchase signals with USDT
async def purchase_signals(telegram_id: int, package_id: int):
    try:
        async with aiohttp.ClientSession() as session:
            params = {"package_id": package_id}
            async with session.post(f"{settings.API_URL}/api/users/{telegram_id}/purchase_signals",
                                    json=params) as response:
                return await response.json()
    except Exception as e:
        logger.error(f"Error purchasing signals: {e}")
        return None


@router.message(F.text == "üíº –ë–∞–ª–∞–Ω—Å")
async def show_balance(message: types.Message):
    # Get user data
    user_data = await get_user(message.from_user.id)
    if not user_data:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )
        return

    # Show both USDT and signals balance
    balance_text = (
        f"üíº <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b>\n\n"
        f"üí∞ <b>USDT:</b> {user_data['usdt_balance']:.2f}\n"
        f"üéØ <b>–°–∏–≥–Ω–∞–ª—ã:</b> {user_data['signals_balance']} —à—Ç.\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    await message.answer(balance_text, reply_markup=get_balance_menu(), parse_mode="HTML")


@router.callback_query(F.data == "back_to_balance")
async def back_to_balance_callback(callback: types.CallbackQuery):
    user_data = await get_user(callback.from_user.id)
    if not user_data:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        return

    balance_text = (
        f"üíº <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b>\n\n"
        f"üí∞ <b>USDT:</b> {user_data['usdt_balance']:.2f}\n"
        f"üéØ <b>–°–∏–≥–Ω–∞–ª—ã:</b> {user_data['signals_balance']} —à—Ç.\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    await callback.message.edit_text(balance_text, reply_markup=get_balance_menu(), parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "deposit_usdt")
async def deposit_usdt_callback(callback: types.CallbackQuery):
    if not cryptocloud_client:
        await callback.message.edit_text(
            "‚ùå –°–µ—Ä–≤–∏—Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=get_back_to_balance_keyboard()
        )
        await callback.answer()
        return

    await callback.message.edit_text(
        "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è USDT:",
        reply_markup=get_usdt_deposit_amounts_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("deposit_usdt_"))
async def deposit_usdt_amount_callback(callback: types.CallbackQuery, state: FSMContext):
    if not cryptocloud_client:
        await callback.message.edit_text(
            "‚ùå –°–µ—Ä–≤–∏—Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=get_back_to_balance_keyboard()
        )
        await callback.answer()
        return

    # Extract amount from callback data
    amount = float(callback.data.split("_")[-1])

    # Store amount in state
    await state.update_data(usdt_deposit_amount=amount)

    # Show loading message
    await callback.message.edit_text(
        f"‚è≥ –°–æ–∑–¥–∞—é —Å—á–µ—Ç –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {amount} USDT...",
        reply_markup=get_back_to_balance_keyboard()
    )

    try:
        # Create unique order ID
        order_id = f"deposit_{callback.from_user.id}_{int(datetime.now().timestamp())}"

        # Create invoice with CryptoCloud
        invoice_result = await cryptocloud_client.create_invoice(
            amount=amount,
            currency="USD",
            order_id=order_id
        )

        if invoice_result.get("success"):
            # Store invoice data in state
            await state.update_data(
                invoice_id=invoice_result["invoice_id"],
                payment_url=invoice_result["payment_url"],
                order_id=order_id
            )

            # Create payment keyboard with real payment URL
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            payment_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=invoice_result["payment_url"])],
                [InlineKeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂",
                                      callback_data=f"check_payment_{invoice_result['invoice_id']}")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_balance")]
            ])

            payment_text = (
                f"üí∞ <b>–°—á–µ—Ç –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                f"üíµ <b>–°—É–º–º–∞:</b> {amount} USDT\n"
                f"üÜî <b>ID —Å—á–µ—Ç–∞:</b> <code>{invoice_result['invoice_id']}</code>\n\n"
                f"üìù <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n"
                f"1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª\n"
                f"2. –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É\n"
                f"3. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å\n"
                f"4. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n\n"
                f"üí° <b>–í–∞–∂–Ω–æ:</b> –ü–µ—Ä–µ–≤–æ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ —Å–µ—Ç–∏.\n"
                f"‚è∞ –°—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç.\n\n"
                f"–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã USDT –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
            )

            await callback.message.edit_text(
                payment_text,
                reply_markup=payment_keyboard,
                parse_mode="HTML"
            )

            # Set state to waiting for payment
            await state.set_state(DepositStates.waiting_for_payment)

        else:
            error_text = (
                f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞</b>\n\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {invoice_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
            await callback.message.edit_text(
                error_text,
                reply_markup=get_back_to_balance_keyboard(),
                parse_mode="HTML"
            )

    except Exception as e:
        logger.error(f"Error creating payment invoice: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=get_back_to_balance_keyboard()
        )

    await callback.answer()


@router.callback_query(F.data.startswith("check_payment_"))
async def check_payment_callback(callback: types.CallbackQuery, state: FSMContext):
    if not cryptocloud_client:
        await callback.answer("‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return

    # Extract invoice ID from callback data
    invoice_id = callback.data.split("check_payment_")[1]

    try:
        # Get invoice information
        invoice_info = await cryptocloud_client.get_invoice_info(invoice_id)

        if invoice_info.get("success"):
            status = invoice_info.get("status", "").lower()

            if status == "paid":
                # Payment successful - update user balance
                state_data = await state.get_data()
                amount = state_data.get("usdt_deposit_amount", 0)

                if amount > 0:
                    # Add USDT to user balance
                    result = await add_usdt_balance(callback.from_user.id, amount)

                    if result and result.get("success"):
                        user_data = await get_user(callback.from_user.id)
                        success_text = (
                            f"‚úÖ <b>–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</b>\n\n"
                            f"üí∞ <b>–ó–∞—á–∏—Å–ª–µ–Ω–æ:</b> {amount} USDT\n"
                            f"üíº <b>–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:</b> {user_data['usdt_balance']:.2f} USDT\n"
                            f"üéØ <b>–°–∏–≥–Ω–∞–ª—ã:</b> {user_data['signals_balance']} —à—Ç.\n\n"
                            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!"
                        )

                        await callback.message.edit_text(
                            success_text,
                            reply_markup=get_back_keyboard(),
                            parse_mode="HTML"
                        )

                        # Clear state
                        await state.clear()
                    else:
                        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—á–∏—Å–ª–µ–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤")
                else:
                    await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞")

            elif status in ["waiting", "pending"]:
                await callback.answer("‚è≥ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É.")

            elif status == "expired":
                await callback.answer("‚è∞ –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —Å—á–µ—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Å—á–µ—Ç.")

            else:
                await callback.answer(f"‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {status}")

        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞")

    except Exception as e:
        logger.error(f"Error checking payment status: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞")


@router.callback_query(F.data == "buy_signals")
async def buy_signals_callback(callback: types.CallbackQuery):
    user_data = await get_user(callback.from_user.id)
    if not user_data:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        return

    buy_signals_text = (
        f"üõí <b>–ü–æ–∫—É–ø–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤</b>\n\n"
        f"üí∞ <b>–í–∞—à USDT –±–∞–ª–∞–Ω—Å:</b> {user_data['usdt_balance']:.2f}\n"
        f"üéØ <b>–¢–µ–∫—É—â–∏–µ —Å–∏–≥–Ω–∞–ª—ã:</b> {user_data['signals_balance']} —à—Ç.\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    await callback.message.edit_text(
        buy_signals_text,
        reply_markup=get_buy_signals_menu(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "select_package")
async def select_package_callback(callback: types.CallbackQuery):
    user_data = await get_user(callback.from_user.id)
    if not user_data:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        return

    package_text = (
        f"üì¶ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤:</b>\n\n"
        f"üí∞ <b>–í–∞—à USDT –±–∞–ª–∞–Ω—Å:</b> {user_data['usdt_balance']:.2f}\n\n"
        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:"
    )

    await callback.message.edit_text(
        package_text,
        reply_markup=get_packages_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("package_"))
async def package_selection_callback(callback: types.CallbackQuery):
    # Extract package ID from callback data
    package_id = int(callback.data.split("_")[1])

    # Find package details
    package = None
    for pkg in settings.DEFAULT_PACKAGES:
        if pkg["id"] == package_id:
            package = pkg
            break

    if not package:
        await callback.message.edit_text("‚ùå –ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    user_data = await get_user(callback.from_user.id)
    if not user_data:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        return

    # Check if user has enough USDT
    if user_data['usdt_balance'] < package['price']:
        insufficient_text = (
            f"‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>\n\n"
            f"üí∞ <b>–í–∞—à USDT –±–∞–ª–∞–Ω—Å:</b> {user_data['usdt_balance']:.2f}\n"
            f"üí≥ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–∞–∫–µ—Ç–∞:</b> {package['price']:.2f} USDT\n"
            f"üìä <b>–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç:</b> {package['price'] - user_data['usdt_balance']:.2f} USDT\n\n"
            f"–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–∞–∫–µ—Ç–∞."
        )
        await callback.message.edit_text(
            insufficient_text,
            reply_markup=get_buy_signals_menu(),
            parse_mode="HTML"
        )
        await callback.answer()
        return

    # Show package confirmation
    confirm_text = (
        f"üì¶ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏</b>\n\n"
        f"üéØ <b>–ü–∞–∫–µ—Ç:</b> {package['name']}\n"
        f"üìä <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤:</b> {package['signals_count']} —à—Ç.\n"
        f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {package['price']:.2f} USDT\n\n"
        f"üí≥ <b>–í–∞—à USDT –±–∞–ª–∞–Ω—Å:</b> {user_data['usdt_balance']:.2f}\n"
        f"üí∏ <b>–û—Å—Ç–∞–Ω–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏:</b> {user_data['usdt_balance'] - package['price']:.2f} USDT\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É:"
    )

    await callback.message.edit_text(
        confirm_text,
        reply_markup=get_package_confirm_keyboard(package_id),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("confirm_package_"))
async def confirm_package_callback(callback: types.CallbackQuery):
    # Extract package ID from callback data
    package_id = int(callback.data.split("_")[2])

    # Purchase signals
    result = await purchase_signals(callback.from_user.id, package_id)

    if result and result.get("success"):
        success_text = (
            f"‚úÖ <b>–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!</b>\n\n"
            f"üì¶ <b>–ü–∞–∫–µ—Ç:</b> {result['package']}\n"
            f"üéØ <b>–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤:</b> {result['signals_added']} —à—Ç.\n\n"
            f"üí∞ <b>USDT –±–∞–ª–∞–Ω—Å:</b> {result['usdt_balance']:.2f}\n"
            f"üéØ <b>–°–∏–≥–Ω–∞–ª—ã:</b> {result['signals_balance']} —à—Ç."
        )

        await callback.message.edit_text(
            success_text,
            reply_markup=get_back_keyboard(),
            parse_mode="HTML"
        )
    else:
        error_message = result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞") if result else "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        await callback.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ:</b> {error_message}",
            reply_markup=get_buy_signals_menu(),
            parse_mode="HTML"
        )

    await callback.answer()


@router.callback_query(F.data == "back_to_main")
async def back_to_main_callback(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.delete()
    await callback.message.answer(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_menu()
    )
    await callback.answer()