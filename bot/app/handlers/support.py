from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging
from config import settings
from keyboards import get_support_keyboard, get_cancel_keyboard, get_back_keyboard, get_main_menu

router = Router()
logger = logging.getLogger(__name__)


# States
class SupportStates(StatesGroup):
    waiting_for_message = State()


@router.message(F.text == "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def show_support(message: types.Message):
    await message.answer(
        "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        reply_markup=get_support_keyboard()
    )


@router.callback_query(F.data == "contact_admin")
async def contact_admin_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=get_back_keyboard()
    )
    await state.set_state(SupportStates.waiting_for_message)
    await callback.answer()


@router.message(SupportStates.waiting_for_message)
async def process_support_message(message: types.Message, state: FSMContext):
    # Save message to state
    await state.update_data(support_message=message.text)

    # Forward message to admin(s)
    for admin_id in settings.ADMIN_USER_IDS:
        try:
            await message.bot.send_message(
                admin_id,
                f"üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.full_name} (ID: {message.from_user.id}):\n\n"
                f"{message.text}"
            )
        except Exception as e:
            logger.error(f"Failed to send message to admin {admin_id}: {e}")

    # Confirm receipt
    await message.answer(
        "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        reply_markup=get_main_menu()
    )

    # Clear state
    await state.clear()


@router.callback_query(F.data == "faq")
async def faq_callback(callback: types.CallbackQuery):
    faq_text = (
        "‚ùì <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b>\n\n"
        "<b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç —Å–∏–≥–Ω–∞–ª—ã?</b>\n"
        "–°–∏–≥–Ω–∞–ª—ã —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ Bybit. "
        "–ö–æ–≥–¥–∞ —Ç—Ä–µ–π–¥–µ—Ä –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∏–ª–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.\n\n"

        "<b>–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –æ–¥–∏–Ω —Å–∏–≥–Ω–∞–ª?</b>\n"
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 1 USDT. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–∞–∫–µ—Ç—ã —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å–∫–∏–¥–∫–æ–π.\n\n"

        "<b>–ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å?</b>\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"üíº –ë–∞–ª–∞–Ω—Å\", –∑–∞—Ç–µ–º \"üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å\" –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n\n"

        "<b>–ú–æ–≥—É –ª–∏ —è –ø–æ–ª—É—á–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤?</b>\n"
        "–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤.\n\n"

        "<b>–ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π?</b>\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª \"üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞\" –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )

    await callback.message.edit_text(
        faq_text,
        reply_markup=get_back_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


# Reply to user from admin
@router.message(F.text.startswith("/reply"))
async def admin_reply(message: types.Message):
    # Check if sender is admin
    if message.from_user.id not in settings.ADMIN_USER_IDS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    try:
        # Format: /reply USER_ID message text
        parts = message.text.split(" ", 2)
        if len(parts) < 3:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /reply USER_ID —Ç–µ–∫—Å—Ç_—Å–æ–æ–±—â–µ–Ω–∏—è")
            return

        user_id = int(parts[1])
        reply_text = parts[2]

        # Send reply to user
        await message.bot.send_message(
            user_id,
            f"üì© <b>–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n{reply_text}",
            parse_mode="HTML"
        )

        await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

    except ValueError:
        await message.answer("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")